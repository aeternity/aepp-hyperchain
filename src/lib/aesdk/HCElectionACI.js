export default {"encodedAci":{"contract":{"functions":[{"arguments":[{"name":"main_staking_ct","type":"MainStaking"},{"name":"entropy_str","type":"string"}],"name":"init","payable":false,"returns":"HCElection.state","stateful":false},{"arguments":[{"name":"entropy_str","type":"string"}],"name":"elect","payable":false,"returns":{"tuple":[]},"stateful":true},{"arguments":[{"name":"height","type":"int"},{"name":"entropy_str","type":"string"}],"name":"elect_at_height","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"leader","payable":false,"returns":"address","stateful":false},{"arguments":[],"name":"get_state","payable":false,"returns":"HCElection.get_state_response","stateful":false}],"kind":"contract_main","name":"HCElection","payable":false,"state":{"record":[{"name":"main_staking_ct","type":"MainStaking"},{"name":"entropy","type":"string"},{"name":"leader","type":"address"}]},"type_defs":[{"name":"get_state_response","typedef":{"record":[{"name":"main_staking_ct","type":"MainStaking"},{"name":"entropy","type":"string"},{"name":"leader","type":"address"}]},"vars":[]}]}},"externalEncodedAci":[{"contract":{"functions":[{"arguments":[],"name":"sorted_validators","payable":false,"returns":{"list":[{"tuple":["address","int"]}]},"stateful":false},{"arguments":[],"name":"total_stake","payable":false,"returns":"int","stateful":false},{"arguments":[],"name":"post_elect","payable":false,"returns":"unit","stateful":true}],"kind":"contract_interface","name":"MainStaking","payable":false,"type_defs":[]}}],"interface":"contract interface MainStaking =\n  entrypoint sorted_validators : () => list((address * int))\n  entrypoint total_stake : () => int\n  stateful entrypoint post_elect : () => unit\n\nmain contract HCElection =\n  record state = {main_staking_ct : MainStaking,entropy : string,leader : address}\n  record get_state_response = {main_staking_ct : MainStaking,entropy : string,leader : address}\n  entrypoint init : (MainStaking, string) => HCElection.state\n  stateful entrypoint elect : (string) => unit\n  entrypoint elect_at_height : (int, string) => address\n  entrypoint leader : () => address\n  entrypoint get_state : () => HCElection.get_state_response\n"}